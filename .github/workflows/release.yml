name: Release Workbench

on:
  push:
    tags:
      - 'v*'
    # branches:
    #   - develop

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fail if tag is not prefixed by v
        run: |
          if [[ $GITHUB_REF_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9].* ]]; then
              echo "Valid version format"
          else
              echo "Invalid version format"
              exit 1
          fi

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          OPTIONS=""
          if [[ $GITHUB_REF_NAME == *"internal"* ]]; then
            OPTIONS="--prerelease"
          fi
          gh release create "$GITHUB_REF_NAME" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release for ${GITHUB_REF_NAME}" \
              --generate-notes $OPTIONS

  build:
    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: [release]
    strategy:
      #fail-fast: false
      matrix:
        include:
          - os: [ubuntu-24.04]
            target: Linux
            name: ubuntu24
            flavour: debian

          - os: [ubuntu-22.04]
            target: Linux
            name: ubuntu22
            flavour: debian

          # - os: [ubuntu-22.04]
          #   target: Linux
          #   name: rocky9
          #   flavour: redhat
          #   container:
          #     image: rockylinux/rockylinux:9

          # X86
          # - os: macos-13
          #   target: Macos
          #   flavour: mac

          - os: macos-14
            target: Macos
            flavour: mac
            name: Macos14

          - os: [self-hosted, Windows]
            target: Windows
            flavour: windows
            name: Windows

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get versions
        if: ${{ github.ref_name != 'develop' && matrix.target != 'Windows' }}
        run: |
          echo "VERSION=$(echo $GITHUB_REF_NAME | sed 's/v//')" >> $GITHUB_ENV

      - name: Get versions (Windows)
        if: ${{ github.ref_name != 'develop' && matrix.target == 'Windows' }}
        run: |
          $VERSION = $env:GITHUB_REF_NAME -replace '^v', ''
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
        shell: powershell

      - name: Setup Python v3.11
        uses: actions/setup-python@v5
        if: ${{ matrix.target == 'Linux' }}
        with:
          python-version: 3.11
          cache: "pip"

      - name: Set up Homebrew
        if: ${{ matrix.flavour == 'mac' }}
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        if: ${{ matrix.flavour == 'mac' }}
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Homebrew Bundler RubyGems
        if: ${{ matrix.flavour == 'mac' && steps.cache.outputs.cache-hit != 'true' }}
        run: brew install-bundler-gems

      - name: Install build dependencies
        if: ${{ matrix.flavour == 'mac' }}
        run: |
          export PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          brew install python@3.11 gcc make libev

      - name: Compile and build (Ubuntu/Debian)
        if: ${{ matrix.target != 'Windows' }}
        run: |
          if [ "${{ matrix.flavour }}" == "debian" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential libev-dev make libc6-dev ruby-rubygems
          fi
          python -m venv venv
          source venv/bin/activate
          python3 -m ensurepip
          pip3 install cython setuptools
          ./configure
          make -j4

      - name: Compile and build (Windows)
        if: ${{ matrix.target == 'Windows' }}
        run: |
          hostname
          make -f Makefile.win build
          move axonops-cqlsh-installer.exe axonops-cqlsh-installer-${{ VERSION }}.exe
        shell: cmd

      - name: Windows package
        if: ${{ matrix.target == 'Windows' }}
        run: |
          make -f Makefile.win package
        shell: cmd

      - name: Linux/OSX create package
        if: ${{ matrix.target != 'Windows' }}
        run: |
          gem install --no-document --user fpm
          ./package.sh ${VERSION}

      - name: Upload Artifacts
        uses: softprops/action-gh-release@v2
        if: ${{ github.ref_name != 'develop' }}
        with:
          files: |
            *.zip
            *.rpm
            *.deb
            axonops-cqlsh-installer.exe
            axonops-cqlsh-installer-${{ VERSION }}.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# code language: yaml
