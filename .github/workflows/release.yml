name: Release Workbench

on:
  push:
    tags:
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fail if tag is not prefixed by v
        run: |
          if [[ $GITHUB_REF_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9].* ]]; then
              echo "Valid version format"
          else
              echo "Invalid version format"
              exit 1
          fi

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          OPTIONS=""
          if [[ $GITHUB_REF_NAME == *"internal"* ]]; then
            OPTIONS="--prerelease"
          fi
          gh release create "$GITHUB_REF_NAME" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release for ${GITHUB_REF_NAME}" \
              --generate-notes $OPTIONS

  build:
    name: Build on ${{ matrix.container && matrix.container.image || matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: [release]
    container: ${{ matrix.container && matrix.container || null }}
    strategy:
      matrix:
        include:
          - os: [ubuntu-24.04-arm]
            target: Linux
            name: ubuntu24
            flavour: debian

          - os: [ubuntu-24.04]
            target: Linux
            name: ubuntu24
            flavour: debian

          - os: [ubuntu-22.04]
            target: Linux
            name: ubuntu22
            flavour: debian

          - os: [ubuntu-22.04]
            target: Linux
            name: rocky9
            flavour: redhat
            container:
              image: rockylinux:9

          - os: [ubuntu-22.04]
            target: Linux
            name: debian11
            flavour: debian
            container:
              image: debian:11

          - os: [ubuntu-22.04]
            target: Linux
            name: debian12
            flavour: debian
            container:
              image: debian:12

          # X86
          # - os: macos-13
          #   target: Macos
          #   flavour: mac
          #   name: Macos13

          - os: macos-14
            target: Macos
            flavour: mac
            name: Macos14

          - os: [self-hosted, Windows]
            target: Windows
            flavour: windows
            name: Windows

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get versions
        if: ${{ github.ref_name != 'develop' && matrix.target != 'Windows' }}
        run: |
          echo "VERSION=$(echo $GITHUB_REF_NAME | sed 's/v//')" >> $GITHUB_ENV

      - name: Get versions (Windows)
        if: ${{ github.ref_name != 'develop' && matrix.target == 'Windows' }}
        run: |
          $VERSION = $env:GITHUB_REF_NAME -replace '^v', ''
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
        shell: powershell

      - name: RedHat pre-reqs
        if: ${{ matrix.flavour == 'redhat' }}
        run: |
          dnf -y install epel-release
          dnf -y install lsb_release

      - name: Setup Python v3.11
        uses: actions/setup-python@v5
        if: ${{ matrix.container == null && matrix.flavour != 'windows' }}
        with:
          python-version: 3.11
          cache: "pip"

      - name: Set up Homebrew
        if: ${{ matrix.flavour == 'mac' }}
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        if: ${{ matrix.flavour == 'mac' }}
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Homebrew Bundler RubyGems
        if: ${{ matrix.flavour == 'mac' && steps.cache.outputs.cache-hit != 'true' }}
        run: brew install-bundler-gems

      - name: Install build dependencies
        if: ${{ matrix.flavour == 'mac' }}
        run: |
          export PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV

          brew install python@3.11 gcc make libev

      - name: Compile and build (Ubuntu/Debian)
        if: ${{ matrix.target != 'Windows' }}
        run: |
          set -ex
          if ! command -v sudo &> /dev/null; then
            SUDO=""
          else
            SUDO="sudo"
          fi

          if [ "${{ matrix.flavour }}" == "debian" ]; then
            $SUDO apt-get update
            $SUDO apt-get install -y build-essential libev-dev make libc6-dev rubygems
            [[ "${{ matrix.name }}" == "debian12" ]] && $SUDO apt-get install -y --ignore-missing python3.11 python3.11-venv python3.11-dev
            [[ "${{ matrix.name }}" == "debian11" ]] && $SUDO apt-get install -y --ignore-missing python3 python3-venv python3-dev python3-pip
          elif [ "${{ matrix.flavour }}" == "redhat" ]; then
            if ! command -v dnf &> /dev/null; then
              echo "Installing dnf..."
              microdnf install -y dnf
            fi
            dnf install -y gcc make libev-devel python3.11-pip python3.11-setuptools python3.11-devel glibc-devel rubygems
          fi
          
          if command -v python3.11 &> /dev/null; then
            PYTHON=$(command -v python3.11)
          elif command -v python3 &> /dev/null; then
            PYTHON=$(command -v python3)
          elif command -v python &> /dev/null; then
            PYTHON=$(command -v python)
          else
            echo "Python not found"
            exit 1
          fi

          $PYTHON -m venv venv
          source venv/bin/activate
          export PYTHON=$(pwd)/venv/bin/python
          $PYTHON -m ensurepip

          [ "${{ matrix.flavour }}" == "readht" ] && $PYTHON -m pip install setuptools
          $PYTHON -m pip install cython

          ./configure

          if command -v gmake &> /dev/null; then
            MAKE=$(command -v gmake)
          else
            MAKE=$(command -v make)
          fi
          $MAKE -j4 PYTHON_CMD=${PYTHON}

      - name: Compile and build (Windows)
        if: ${{ matrix.target == 'Windows' }}
        run: |
          make -f Makefile.win build
        shell: cmd

      - name: Windows package
        if: ${{ matrix.target == 'Windows' }}
        run: |
          make -f Makefile.win package
          move axonops-cqlsh-installer.exe axonops-cqlsh-installer-%GITHUB_REF_NAME%.exe
          del /Q axonops-cqlsh.exe
        shell: cmd
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Linux/OSX create package
        if: ${{ matrix.target != 'Windows' }}
        run: |
          gem install --no-document --user fpm
          ./package.sh ${VERSION}

      - name: Upload Artifacts
        uses: softprops/action-gh-release@v2
        if: ${{ github.ref_name != 'develop' }}
        with:
          files: |
            *.zip
            *.rpm
            *.deb
            *.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# code language: yaml
